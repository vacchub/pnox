#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <time.h>
#include <sys/time.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <errno.h>
#include "pnox.h"
#include "pxmon.h"

static int _pxsend(T_HAND *, M_HAND *, char *);

/******************************************************************************
 * NAME : pxopen()                               
 * DESC : open receive session interface.       
 ******************************************************************************/
int pxopen(tHandle)
T_HAND *tHandle;
{
    struct  sockaddr_un sock_un;
    char    sun_path[128], *homedir;
    int sock, op;

    if (tHandle->pxid != 0)
        sprintf(tHandle->name, "u%07d", tHandle->pxid);
    if (strlen(tHandle->name) == 0)
        return(-1);

    homedir = getenv("PNOX_HOME");
    if (homedir == NULL)
        return(-2);

    sprintf(sun_path, "%s/%s/%s", homedir, QUE_PATH, tHandle->name);
    bzero(&sock_un, sizeof(struct sockaddr_un));
    sock_un.sun_family = AF_UNIX;
    strcpy(sock_un.sun_path, sun_path);

    sock = socket(AF_UNIX, SOCK_DGRAM, 0);
    if (sock < 0)
        return(-3);

    op = 1;
    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &op, sizeof(int));

    if (bind(sock, (struct sockaddr *)&sock_un, sizeof(sock_un)) != 0)
    {
        close(sock);
        return(-4);
    }
    fcntl(sock, F_SETFL, O_NONBLOCK);
    tHandle->devf = sock;

    tHandle->rtaf = SET_OFF;
    return(0);
}

/***************************************************************************** 
 * NAME : pxcall()                              
 * DESC : send and receive a request message or reply message.  
 *****************************************************************************/
int pxcall(tHandle, mHandle, timeout)
T_HAND  *tHandle;
M_HAND  *mHandle;
int	timeout;
{
	int retc;
	
	retc = pxsend(tHandle, mHandle);
	if (retc < 0)
		return(retc);

	retc = pxrecv(tHandle, mHandle, timeout);

	return(retc);
}

/***************************************************************************** 
 * NAME : pxsend()    
 * DESC : send request & reply message 
 *****************************************************************************/
int pxsend(tHandle, mHandle)
T_HAND  *tHandle;
M_HAND  *mHandle;
{
    int retc, ii;
    char    sock_path[128], *homedir;

    homedir = getenv("PNOX_HOME");
    if (homedir == NULL)
        return(-1);

	if (tHandle->call[0] != 'u' && memcmp(tHandle->call, "rta", 3) != 0 &&
		tHandle->nusr == 0)
	{
		retc = pxrout(tHandle, mHandle);
		if (retc < 0)
        	return(-2);
	}

	if (tHandle->nusr == 0)
	{
pxsyslog("pxsend", "nusr 0");
    	sprintf(sock_path, "%s/%s/%s", homedir, QUE_PATH, tHandle->call);
		retc = _pxsend(tHandle, mHandle, sock_path);
		if (retc < 0)
			return(retc);
	}
	else if (tHandle->nusr > 0)
	{
pxsyslog("pxsend", "nusr else");
		for (ii = 0; ii < tHandle->nusr && ii < MAX_PXSEND; ii++)
		{
    		sprintf(sock_path, "%s/%s/u%07d", homedir, QUE_PATH, *(tHandle->ulst + ii));
			retc = _pxsend(tHandle, mHandle, sock_path);
			if (retc < 0)
			{
				pxsyslog("pxsend", "_pxsend error retc[%d]", retc);
				continue;
			}
		}
	}

    return(0);
}

/***************************************************************************** 
 * NAME : _pxsend()    
 * DESC : inter send request & reply message 
 *****************************************************************************/
int _pxsend(tHandle, mHandle, sock_path)
T_HAND  *tHandle;
M_HAND  *mHandle;
char	*sock_path;
{
    struct  sockaddr_un sock_un;
    int retc, sndlen, sndvec;
    int csock, op, sndl;
    char    sun_path[128];
    char    sndb[65*1024];

    bzero(&sock_un, sizeof(sock_un));
    sock_un.sun_family = AF_UNIX;
    strcpy(sock_un.sun_path, sock_path);

    csock = socket(AF_UNIX, SOCK_DGRAM, 0);
    if (csock < 0)
        return(-3);

    op = MAX_SND_LEN;
    setsockopt(csock, SOL_SOCKET, SO_SNDBUF, &op, sizeof(int));

    memset(sndb, 0x00, sizeof(sndb));	
	mHandle->iochdr.pxid = tHandle->pxid;
    memcpy(mHandle->iochdr.name, tHandle->name, sizeof(mHandle->iochdr.name));
    memcpy(mHandle->iochdr.trnm, mHandle->trnm, sizeof(mHandle->iochdr.trnm));
    memcpy(sndb, &mHandle->iochdr, sizeof(mHandle->iochdr));
    sndl = sizeof(mHandle->iochdr);	
    memcpy(&sndb[sndl], mHandle->sndb, mHandle->sndl);
    sndl += mHandle->sndl;

    retc = sendto(csock, (void *)sndb, sndl, 0,
	(struct sockaddr *)&sock_un, sizeof(sock_un));
    if (retc < 0)
    {
        close(csock);
        return(-4);
    }	

    close(csock);
    return(0);
}

/***************************************************************************** 
 * NAME : pxrecv()                              
 * DESC : receive a request message or reply message.  
 *****************************************************************************/
int pxrecv(tHandle, mHandle, timeout)
T_HAND  *tHandle;
M_HAND  *mHandle;
int	timeout;
{
    struct iochdr *iochdr;
    struct timeval timeval;
    struct sockaddr_un sock_un;
    char recv_b[MAX_RCV_LEN];
    int recv_l, op, clen;
    int xxsock, nfound;
    fd_set  rlist;

    xxsock = tHandle->devf;
    op = MAX_RCV_LEN;
    setsockopt(xxsock, SOL_SOCKET, SO_RCVBUF, &op, sizeof(int));

    clen = sizeof(sock_un);
    
    FD_ZERO(&rlist);
    FD_SET(xxsock, &rlist);
    timeval.tv_sec = timeout;
    timeval.tv_usec = 0;
    nfound = select(xxsock+1, &rlist, NULL, NULL, &timeval);
    if (nfound < 0)
        return(-1);
    
    if (nfound == 0)
        return(-2);

	memset(recv_b, 0x00, sizeof(recv_b));
    recv_l = recvfrom(xxsock, (void *)recv_b, sizeof(recv_b), 0,
		(struct sockaddr *)&sock_un, (socklen_t *)&clen);
pxsyslog("pxrecv", "-------------recv_l[%d]", recv_l);
    if (recv_l <= 0)
    {
        mHandle->rcvl = 0;
        return(0);
    }
    
    iochdr = (struct iochdr *)recv_b;
	memcpy(&mHandle->iochdr, iochdr, sizeof(struct iochdr));

	tHandle->pxid = iochdr->pxid;

    memset(tHandle->call, 0x00, sizeof(tHandle->call));
    memcpy(tHandle->call, iochdr->name, sizeof(tHandle->call));

    memset(mHandle->trnm, 0x00, sizeof(mHandle->trnm));
    memcpy(mHandle->trnm, iochdr->trnm, sizeof(mHandle->trnm));

    memset(mHandle->rcvb, 0x00, strlen(mHandle->rcvb));
    memcpy(mHandle->rcvb, &recv_b[sizeof(struct iochdr)], 
        recv_l - sizeof(struct iochdr));

    mHandle->rcvl = recv_l - sizeof(struct iochdr);

    return(mHandle->rcvl);
}

/****************************************************************************** 
 * NAME : pxclose()  
 * DESC : close hero intreface.   
 ******************************************************************************/
int pxclose(tHandle)
T_HAND *tHandle;
{
    char    sun_path[128], *homedir;
    char    name_b[32];
    
    if (tHandle->devf >= 0)
        close(tHandle->devf);
    tHandle->devf = -1;

    if (strlen(tHandle->name) == 0)
        return(-1);

	homedir = getenv("PNOX_HOME");
	if (homedir == NULL)
        return(-2);

    sprintf(sun_path, "%s/%s/%s", homedir, QUE_PATH, tHandle->name);
    unlink(sun_path);
    return(0);
}

/***************************************************************************** 
 * NAME : pxrout()    
 * DESC : routing process
 *****************************************************************************/
int pxrout(tHandle, mHandle)
T_HAND  *tHandle;
M_HAND  *mHandle;
{
	struct	pxmon	*pxmon;
	int	ii, jj, nprc;	
	char svcnm[16], rtcall[16];

	pxmon = _open_pxmon(-1);
	if (pxmon == NULL)
	{
		pxsyslog("pxrout", "pxmon create error");
		return(-1);
	}

	nprc = pxmon->nprc;
	if (nprc > MAX_PNOX_PRC)
		nprc = MAX_PNOX_PRC;

	sprintf(svcnm, mHandle->trnm, sizeof(mHandle->trnm));
	if (strlen(svcnm) <= 0)
	{
		pxsyslog("pxrout", "pxmon service error");
		return(-2);
	}

	memcpy(tHandle->call, "pnoxtpc", 7);

	if (tHandle->rtaf == SET_ON)
		return(0);

	for (ii = 0; ii < nprc; ii++)
	{
		if (memcmp(pxmon->prcmng[ii].proc, svcnm, strlen(svcnm)) != 0)
			continue;

		if (pxmon->prcmng[ii].rout[0] != 0x00)
		{
			for (jj = 0; jj < MAX_PNOX_RTC; jj++)
			{
				if (memcmp(pxmon->prcmng[ii].rout, pxmon->rtcmng[jj].ipad, 
					sizeof(pxmon->prcmng[ii].rout)) != 0)
				{
					continue;
				}

				memset(rtcall, 0x00, sizeof(rtcall));
				sprintf(rtcall, "rtc%04d", pxmon->rtcmng[jj].rtno);
				memcpy(tHandle->call, rtcall, sizeof(tHandle->call));
				break;
			}
		}
	}

#if 0
	/* not close	*/
	_close_pxmon(-1);
#endif
	return(0);
}

